<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans
   >
    <!-- Spring的入门的配置==================== -->
    <bean name="userDao" class="com.hss.spring.bean.UserDAOImpl" >
        <property name="name" value="战三" />
    </bean>

    <!--
        id		:使用了约束中的唯一约束。里面不能出现特殊字符的。
        name	:没有使用约束中的唯一约束（理论上可以出现重复的，但是实际开发不能出现的）。里面可以出现特殊字符。
    -->
    <bean id="userDao1" class="com.hss.spring.bean.UserDAOImpl" >
        <property name="name" value="战三" />
    </bean>

    <!-- Spring的sBean的生命周期的配置=========== -->
    <!--scope 默认单例 applicationContext.close() 后单例调用destory  多例的情况下不会destory  -->
    <!--
    scope			：Bean的作用范围
        singleton		：默认的，Spring会采用单例模式创建这个对象。
        prototype	：多例模式。（Struts2和Spring整合一定会用到）
        request		：应用在web项目中，Spring创建这个类以后，将这个类存入到request范围中。
        session		：应用在web项目中，Spring创建这个类以后，将这个类存入到session范围中。
        globalsession	：应用在web项目中，必须在porlet环境下使用。但是如果没有这种环境，相对于session。
    -->
    <bean id="userDao2" class="com.hss.spring.bean.UserDAOImpl"  scope="singleton" init-method="setup" destroy-method="destroy" >
        <property name="name" value="战三" />
    </bean>


    <!-- 静态工厂实例化 -->
    <bean id="bean2" class="com.hss.spring.day1.demo3.Bean2Factory" factory-method="createBean2"/>

    <!-- 实例工厂实例化 -->
    <bean id="bean3Factory" class="com.hss.spring.day1.demo3.Bean3Factory"></bean>
    <bean id="bean3" factory-bean="bean3Factory" factory-method="createBean3"></bean>

    <!-- Spring的属性注入的方式================== -->
    <!-- 构造方法的方式 -->
    <bean id="car" class="com.hss.spring.day1.demo4.Car">
        <constructor-arg index="0" value="宝马"/>
        <constructor-arg index="1" value="800000"/><!--name="price" -->
    </bean>

    <!-- set方法的方式 -->
    <bean id="car2" class="com.hss.spring.day1.demo4.Car2">
        <property name="name" value="奔驰"/>
        <property name="price" value="1000000"/>
    </bean>

    <!-- set方法注入对象类型的属性 -->
    <bean id="employee" class="com.hss.spring.day1.demo4.Employee">
<!--
        value:设置普通类型的值，ref:设置其他的类的id或name
-->
        <property name="name" value="涛哥"/>
        <property name="car2" ref="car2"/>
    </bean>
    <!-- 改为p名称空间的方式 -->
    <!-- <bean id="car2" class="com.itheima.spring.demo4.Car2" p:name="奇瑞QQ" p:price="30000"></bean>

	<bean id="employee" class="com.itheima.spring.demo4.Employee" p:name="王东" p:car2-ref="car2"></bean> -->

    <!-- SpEL的属性注入 -->
<!--    <bean id="carInfo" class="com.itheima.spring.demo4.CarInfo">
    </bean>

    <bean id="car2" class="com.itheima.spring.demo4.Car2">
        <property name="name" value="#{carInfo.name}"></property>
        <property name="price" value="#{carInfo.calculatorPrice()}"></property>
    </bean>

    <bean id="employee" class="com.itheima.spring.demo4.Employee">
        <property name="name" value="#{'赵洪'}"></property>
        <property name="car2" value="#{car2}"></property>
    </bean>-->

    <!-- Spring的集合属性的注入============================ -->
    <!-- 注入数组类型 -->
    <bean id="collectionBean" class="com.hss.spring.day1.demo5.CollectionBean">
        <!-- 数组类型 -->
        <property name="arrs">
            <list>
                <value>王东</value>
                <value>赵洪</value>
                <value>李冠希</value>
            </list>
        </property>

        <!-- 注入list集合 -->
        <property name="list">
            <list>
                <value>李兵</value>
                <value>赵如何</value>
                <value>邓凤</value>
            </list>
        </property>

        <!-- 注入set集合 -->
        <property name="set">
            <set>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </set>
        </property>

        <!-- 注入Map集合 -->
        <property name="map">

            <map>
                <entry key="aaa" value="111"/>
                <entry key="bbb" value="222"/>
                <entry key="ccc" value="333"/>
            </map>
        </property>
    </bean>

</beans>